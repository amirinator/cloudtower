package com.getgo.cloudtower.dao;import com.getgo.cloudtower.model.SSLCertificate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.sql2o.Connection;import java.util.List;/** * Created by amirnashat on 8/2/16. */public class SSLCertificateDAO extends DefaultDAO {	final Logger logger = LoggerFactory.getLogger(SSLCertificateDAO.class);	public List<SSLCertificate> getSSLCertificates() {		logger.info("retrieving SSL certificates from the database");		String sslCertificatesSQL = "SELECT account_id as accountId ," +				                            "region_name as regionName ," +											"certificate_type as certificateType ," +				                            "hostname ," +				                            "expiration_date as expirationDate " +				                            "FROM ssl_certificates";		List<SSLCertificate> results = null;		try(Connection conn = connection.open()) {			results = conn.createQuery(sslCertificatesSQL)					       .executeAndFetch(SSLCertificate.class);		} catch (Exception e) {			logger.error("Issue with retrieving ssl certificates",e);		}		return results;	}	public SSLCertificate getSSLCertificateWithId(SSLCertificate sslCertificate) {		String selectSSLCertificateSQL = "SELECT id , " +				                                 "account_id as accountId , " +				                                 "region_name as regionName , " +												 "certificate_type as certificateType, " +				                                 "hostname , " +				                                 "expiration_date as expirationDate " +				                                 "FROM ssl_certificates " +				                                 "WHERE id = :id";		try (Connection conn = connection.open()) {			return conn.createQuery(selectSSLCertificateSQL)					       .addParameter("id" , sslCertificate.getId())					       .executeAndFetchFirst(SSLCertificate.class);		}	}	public SSLCertificate getSSLCertificateWithHostnameAndAccountId(SSLCertificate sslCertificate) {		String selectSSLCertificateSQL = "SELECT id , " +				                                 "account_id AS accountId , " +				                                 "region_name as regionName , " +				                                 "hostname , " +												 "certificate_type as certificateType, " +				                                 "expiration_date as expirationDate " +				                                 "FROM ssl_certificates " +				                                 "WHERE account_id = :account_id " +				                                 "AND hostname = :hostname";		try (Connection conn = connection.open()) {			return conn.createQuery(selectSSLCertificateSQL)					       .addParameter("hostname" , sslCertificate.getHostname())					       .addParameter("account_id" , sslCertificate.getAccountId())					       .executeAndFetchFirst(SSLCertificate.class);		}	}	public void updateSSLCertificate(SSLCertificate sslCertificate) {		String updateSSLCertificateSQL = "UPDATE ssl_certificates SET " +				                                 "account_id = :account_id , " +				                                 "region_name = :region , " +				                                 "hostname = :hostname , " +				                                 "expiration_date = :expiration_date " +				                                 "WHERE id = :id";		try (Connection conn = connection.open()) {			conn.createQuery(updateSSLCertificateSQL)					.addParameter("account_id" , sslCertificate.getAccountId())					.addParameter("region" , sslCertificate.getRegionName())					.addParameter("hostname" , sslCertificate.getHostname())					.addParameter("expiration_date" , sslCertificate.getExpirationDate())					.addParameter("id" , sslCertificate.getId())					.executeUpdate();		}	}	public void insertSSLCertificate(SSLCertificate sslCertificate) {		String insertSSLCertificateSQL = "INSERT INTO ssl_certificates(" +				                                 "account_id , " +				                                 "region_name , " +												 "certificate_type , " +				                                 "hostname , " +				                                 "expiration_date) VALUES ( " +				                                 ":account_id , " +				                                 ":region , " +												 ":certificate_type, " +				                                 ":hostname , " +				                                 ":expiration_date)";		try(Connection conn = connection.open()) {			conn.createQuery(insertSSLCertificateSQL)					.addParameter("account_id" , sslCertificate.getAccountId())					.addParameter("region" , sslCertificate.getRegionName())					.addParameter("hostname" , sslCertificate.getHostname())					.addParameter("certificate_type" , sslCertificate.getCertificateType() )					.addParameter("expiration_date" , sslCertificate.getExpirationDate())					.executeUpdate();		}	}}