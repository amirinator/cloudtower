package com.getgo.cloudtower.dao;import com.getgo.cloudtower.model.Usage;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.sql2o.Connection;import java.util.List;import static com.getgo.cloudtower.dao.DefaultDAO.connection;/** * Created by amirnashat on 9/2/16. */public class UsageDAO {	private Logger logger = LoggerFactory.getLogger(UsageDAO.class);	public List<Usage> getUsages() {				String selectUsagesWithNameSQL = "SELECT id , " +				                                 "usage_name as usageName , " +				                                 "running_value as runningValue , " +				                                 "max_allowed_value as maxAllowedValue , " +				                                 "region_name as regionName , " +				                                 "account_id as accountId " +				                                 "FROM usages ";				try (Connection conn = connection.open()) {			return conn.createQuery(selectUsagesWithNameSQL)					       .executeAndFetch(Usage.class);		}	}		public Usage getUsageWithNameAndAccountAndRegion(Usage usage) {		String selectUsagesWithNameSQL = "SELECT id , " +				                                 "usage_name as usageName , " +				                                 "running_value as runningValue , " +				                                 "max_allowed_value as maxAllowedValue , " +				                                 "region_name as regionName , " +				                                 "account_id as accountId " +				                                 "FROM usages " +				                                 "WHERE account_id = :account_id AND " +				                                 "usage_name = :usage_name AND " +				                                 "region_name = :region_name";		try (Connection conn = connection.open()) {			return conn.createQuery(selectUsagesWithNameSQL)					       .addParameter("account_id" , usage.getAccountId())					       .addParameter("usage_name" , usage.getUsageName())						   .addParameter("region_name" , usage.getRegionName())					       .executeAndFetchFirst(Usage.class);		}	}	public List<Usage> getUsageWithNameAndAccount(Usage usage) {		String selectUsagesWithNameSQL = "SELECT id , " +				                                 "usage_name as usageName , " +				                                 "running_value as runningValue , " +				                                 "max_allowed_value as maxAllowedValue , " +				                                 "region_name as regionName , " +				                                 "account_id as accountId " +				                                 "FROM usages " +				                                 "WHERE account_id = :account_id AND " +				                                 "usage_name = :usage_name";		try (Connection conn = connection.open()) {			return conn.createQuery(selectUsagesWithNameSQL)					       .addParameter("account_id" , usage.getAccountId())						   .addParameter("usage_name" , usage.getUsageName())					       .executeAndFetch(Usage.class);		}	}	public void updateUsage(Usage usage) {		String updateUsageSQL = "UPDATE usages SET " +				                        "account_id = :account_id ," +										"running_value = :running_value ," +										"max_allowed_value = :max_allowed_value ," +										"region_name = :region_name ," +										"usage_name = :usage_name " +										"WHERE id = :id";		try (Connection conn = connection.open()) {			conn.createQuery(updateUsageSQL)					.addParameter("account_id" , usage.getAccountId())					.addParameter("running_value" , usage.getRunningValue())					.addParameter("max_allowed_value" , usage.getMaxAllowedValue())					.addParameter("region_name" , usage.getRegionName())					.addParameter("usage_name" , usage.getUsageName())					.addParameter("id" , usage.getId())					.executeUpdate();		}	}	public void insertUsage(Usage usage) {		String insertUsageSQL = "INSERT INTO usages (" +				                        "usage_name , " +				                        "running_value , " +				                        "max_allowed_value , " +				                        "region_name , " +				                        "account_id) VALUES (" +				                        ":usage_name , " +				                        ":running_value , " +				                        ":max_allowed_value , " +				                        ":region_name , " +				                        ":account_id)";		try(Connection conn = connection.open()) {			conn.createQuery(insertUsageSQL)					.addParameter("usage_name" , usage.getUsageName())					.addParameter("running_value" , usage.getRunningValue())					.addParameter("max_allowed_value" , usage.getMaxAllowedValue())					.addParameter("region_name" , usage.getRegionName())					.addParameter("account_id" , usage.getAccountId())					.executeUpdate();		}			}}