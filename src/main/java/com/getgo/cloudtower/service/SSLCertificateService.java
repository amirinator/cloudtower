package com.getgo.cloudtower.service;import com.amazonaws.AmazonClientException;import com.amazonaws.auth.AWSCredentials;import com.amazonaws.auth.profile.ProfileCredentialsProvider;import com.amazonaws.regions.Region;import com.amazonaws.regions.Regions;import com.amazonaws.services.ec2.AmazonEC2;import com.amazonaws.services.ec2.AmazonEC2Client;import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancing;import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;import com.amazonaws.services.elasticloadbalancing.model.ListenerDescription;import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;import com.getgo.cloudtower.dao.AccountDAO;import com.getgo.cloudtower.dao.SSLCertificateDAO;import com.getgo.cloudtower.model.Account;import com.getgo.cloudtower.model.SSLCertificate;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import javax.net.ssl.SSLSocket;import javax.net.ssl.SSLSocketFactory;import java.io.PrintWriter;import java.io.StringWriter;import java.net.InetSocketAddress;import java.security.PublicKey;import java.security.cert.Certificate;import java.security.cert.X509Certificate;import java.sql.Date;import java.util.List;/** * Created by amirnashat on 7/28/16. */public class SSLCertificateService implements AWSService {	final Logger logger = LoggerFactory.getLogger(SSLCertificateService.class);	public void process() {		SSLCertificateDAO dao = new SSLCertificateDAO();		//First query database and obtain a list of the		List<Account> accounts = AccountDAO.getAccounts();		for (Account account: accounts) {			Integer accountId = account.getId();			/*	         * The ProfileCredentialsProvider will return your [default]	         * credential profile by reading from the credentials file located at	         * (~/.aws/credentials).	         */			AWSCredentials credentials = null;			try {				credentials = new ProfileCredentialsProvider(account.getName()).getCredentials();			} catch (Exception e) {				throw new AmazonClientException("Cannot load the credentials from the credential profiles file. " + "Please make sure that your credentials file is at the correct " + "location (~/.aws/credentials), and is in valid format.", e);			}			// Create the AmazonEC2Client object so we can call various APIs.			AmazonEC2 ec2 = new AmazonEC2Client(credentials);			Region usEast1 = Region.getRegion(Regions.US_EAST_1);			ec2.setRegion(usEast1);			List<com.amazonaws.services.ec2.model.Region> regions = ec2.describeRegions().getRegions();			for (com.amazonaws.services.ec2.model.Region region : regions) {				String regionName = region.getRegionName();				AmazonElasticLoadBalancing elbClient= new AmazonElasticLoadBalancingClient(credentials);				List<LoadBalancerDescription> elbs = elbClient.describeLoadBalancers().getLoadBalancerDescriptions();				try {					for (LoadBalancerDescription elb : elbs) {						String hostname = elb.getDNSName();						logger.info("ELB hostname is <"+hostname+">");						int port = 443;						int connectionTimeout = 3000; //3000 milliseconds						Date certificateExpirationDate = null;						List<ListenerDescription> elbListenerDescriptions = elb.getListenerDescriptions();						for (ListenerDescription elbListenerDescription : elbListenerDescriptions) {							if (elbListenerDescription.getListener().getProtocol().equalsIgnoreCase("HTTPS")) {								logger.info("Region <" + regionName + "> SSL host <" + hostname + ">");								try {									SSLSocket socket = (SSLSocket) SSLSocketFactory.getDefault().createSocket();									socket.connect(new InetSocketAddress(hostname, port), connectionTimeout);									socket.startHandshake();									Certificate[] serverCerts = socket.getSession().getPeerCertificates();									for (int i = 0; i < serverCerts.length; i++) {										Certificate myCert = serverCerts[i];										PublicKey key = myCert.getPublicKey();										X509Certificate sslcert = (X509Certificate) serverCerts[i];										certificateExpirationDate = new Date(sslcert.getNotAfter().getTime());									}									socket.close();								} catch (Exception e) {									logger.info("Couldn't connect to server < " + hostname + ">");									logger.info("hostname is <"+hostname+"> ex date is <"+certificateExpirationDate+">");								}							}						}						if(certificateExpirationDate == null) {							certificateExpirationDate = new Date(System.currentTimeMillis());						}						SSLCertificate certificate = new SSLCertificate();						certificate.setExpirationDate(certificateExpirationDate);						certificate.setHostname(hostname);						certificate.setAccountId(accountId);						certificate.setRegion(regionName);						String accountName = AccountDAO.getAccountWithId(accountId).getName();						certificate.setAccountName(accountName);						SSLCertificate existingSSLCertificateRecord = dao.getSSLCertificatewithHostnameAndAccountId(certificate);						if (existingSSLCertificateRecord == null) {							dao.insertSLLCertificate(certificate);						} else {							dao.updateSSLCertificate(certificate);						}						logger.info(certificate.toString());					}				} catch (Exception exception) {					StringWriter writer = new StringWriter();					PrintWriter printWriter = new PrintWriter( writer );					exception.printStackTrace( printWriter );					printWriter.flush();					String stackTrace = writer.toString();					logger.info(stackTrace);				}			}		}	}	public List<SSLCertificate> retrieve() {		SSLCertificateDAO dao = new SSLCertificateDAO();		List<SSLCertificate> sslCertificates = dao.getSSLCertificates();		for (SSLCertificate sslCertificate : sslCertificates) {			Integer accountId = sslCertificate.getAccountId();			String accountName = AccountDAO.getAccountWithId(accountId).getName();			sslCertificate.setAccountName(accountName);			logger.info("HOSTNAME IS <"+sslCertificate.getHostname()+">");		}		return sslCertificates;	}}