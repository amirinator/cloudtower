package com.getgo.cloudtower.service;import com.amazonaws.AmazonClientException;import com.amazonaws.auth.AWSCredentials;import com.amazonaws.auth.profile.ProfileCredentialsProvider;import com.amazonaws.regions.Region;import com.amazonaws.regions.Regions;import com.amazonaws.services.ec2.AmazonEC2;import com.amazonaws.services.ec2.AmazonEC2Client;import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancing;import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;import java.util.List;import static spark.Spark.*;/** * Created by amirnashat on 7/7/16. */public class HelloWorldService {	public static void main (String[] args) {		//spark.template.freemarker.FreeMarkerEngine freeMarkerEngine = new FreeMark;		//Configuration freeMarkerConfiguration = new Configuration();		//freeMarkerConfiguration.setTemplateLoader(new freemarker.cache.ClassTemplateLoader(.class, "/"));		//freeMarkerEngine.setConfiguration(freeMarkerConfiguration);		before((request, response) -> {			boolean authenticated = true;			// ... check if authenticated			if (!authenticated) {				halt(401, "You are not welcome here");			}		});		get("/hello/:name", (request, response) -> {			/*         * The ProfileCredentialsProvider will return your [default]         * credential profile by reading from the credentials file located at         * (~/.aws/credentials).         */			AWSCredentials credentials = null;			try {				credentials = new ProfileCredentialsProvider().getCredentials();			} catch (Exception e) {				throw new AmazonClientException("Cannot load the credentials from the credential profiles file. " + "Please make sure that your credentials file is at the correct " + "location (~/.aws/credentials), and is in valid format.", e);			}			// Create the AmazonEC2Client object so we can call various APIs.			AmazonEC2 ec2 = new AmazonEC2Client(credentials);			Region usWest2 = Region.getRegion(Regions.US_WEST_2);			ec2.setRegion(usWest2);			List<com.amazonaws.services.ec2.model.Region> regions = ec2.describeRegions().getRegions();			for (com.amazonaws.services.ec2.model.Region region : regions) {				//System.out.println(region.getRegionName());				String regionName = region.getRegionName();				AmazonElasticLoadBalancing elbClient= new AmazonElasticLoadBalancingClient(credentials);				List<LoadBalancerDescription> elbs = elbClient.describeLoadBalancers().getLoadBalancerDescriptions();				for (LoadBalancerDescription elb : elbs) {					System.out.println(elb.getDNSName());				}		    }			return "Hello: " + request.params(":name");		});		after((request,response) -> {			response.header("foo", "set by filter");		});	}}