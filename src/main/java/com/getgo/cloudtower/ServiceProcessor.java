package com.getgo.cloudtower;import com.getgo.cloudtower.model.SSLCertificate;import com.getgo.cloudtower.service.AWSService;import com.getgo.cloudtower.service.SSLCertificateService;import freemarker.template.Configuration;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import spark.ModelAndView;import spark.Request;import spark.template.freemarker.FreeMarkerEngine;import java.util.HashMap;import java.util.List;import java.util.Map;import static spark.Spark.*;/** * Created by amirnashat on 7/29/16. */public class ServiceProcessor {	static final Logger logger = LoggerFactory.getLogger(ServiceProcessor.class);	public static void main (String[] args) {		spark.template.freemarker.FreeMarkerEngine freeMarkerEngine = new FreeMarkerEngine();		Configuration freeMarkerConfiguration = new Configuration();		freeMarkerConfiguration.setTemplateLoader(new freemarker.cache.ClassTemplateLoader(ServiceProcessor.class, "/"));		freeMarkerEngine.setConfiguration(freeMarkerConfiguration);		before((request, response) -> {			boolean authenticated = true;			// ... check if authenticated			if (!authenticated) {				halt(401, "You are not welcome here");			}		});		//TODO: Create a 'get' for each AWS service path that needs a request url		get("/subnets", (request, response) -> {			return null;		});		get("/subnets", (request, response) -> {			return null;		});		get("/sslcertificates/:name", (request, response) -> {			//AWSService sslService = new SSLCertificateService();			//List<SSLCertificate> results = sslService.process();			AWSService sslSrvc = new SSLCertificateService();			List<SSLCertificate> ssl_certificates = sslSrvc.retrieve();			logger.info("retrieved list of ssl certs");			if (shouldReturnHtml(request)) {				response.status(200);				response.type("text/html");				Map<String, Object> attributes = new HashMap<>();				attributes.put("ssl_certificates", ssl_certificates);				logger.info("got here");				return freeMarkerEngine.render(new ModelAndView(attributes, "/spark/template/freemarker/ssl_certificates.ftl"));				// return produce HTML			} else {				return null;				// return produce JSON			}		});		after((request, response) -> {			response.header("foo", "set by filter");		});	}	private static boolean shouldReturnHtml(Request request) {		String accept = request.headers("Accept");		return accept != null && accept.contains("text/html");	}}